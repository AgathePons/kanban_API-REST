!function(){var t={base_url:"http://localhost:3000/",hideModals:function(){document.querySelectorAll(".modal").forEach(t=>t.classList.remove("is-active"))}};const e={makeTagInCardInDOM:function(t,o){const a=document.querySelector(`.box[data-card-id="${t}"] .card-tag-bloc`),d=document.createElement("span");d.classList.add("tag","is-link"),d.textContent=o.name,d.style.backgroundColor=o.color,d.dataset.tagId=o.id,d.addEventListener("dblclick",e.removeTagFromCard),a.appendChild(d)},makeTagSelectModalInDOM:function(t){const e=document.createElement("option");e.textContent=t.name,e.value=t.id,document.getElementById("addTagToCard").querySelector(".tag-list-select").appendChild(e)},showAddTagCardModal:function(t){const e=t.target.closest(".box").dataset.cardId,o=document.getElementById("addTagToCard");o.querySelector("form").dataset.cardId=e,o.classList.add("is-active")},handleAddTagToCardForm:async function(o){o.preventDefault();const a=o.target.dataset.cardId,d=new FormData(o.target);try{const o=await fetch(`${t.base_url}cards/${a}/tags`,{method:"POST",body:d});if(200===o.status){const t=await o.json(),n=(t.tags,t.tags.find(t=>t.id==d.get("id")));e.makeTagInCardInDOM(a,n)}else console.log("post /cards something went wrond");t.hideModals()}catch(n){console.error("handle tag to card form:",n)}},removeTagFromCard:async function(e){const o=e.target,a=o.dataset.tagId,d=e.target.closest(".box").dataset.cardId;try{200===(await fetch(`${t.base_url}cards/${d}/tags/${a}`,{method:"DELETE"})).status?o.remove():console.log("delete /cards something went wrond")}catch(n){console.error("remove tag:",n)}}};var o=e;const a={makeCardInDOM:function(t){const e=document.getElementById("cardTemplate"),d=document.importNode(e.content,!0),n=d.querySelector(".box");d.querySelector(".card-title").textContent=t.content,n.dataset.cardId=t.id,n.style.backgroundColor=t.color,n.querySelector('.edit-card-form input[name="card-id"]').value=t.id,n.querySelector('.edit-card-form input[name="content"]').value=t.content,n.querySelector('.edit-card-form input[name="color"]').value=t.color,n.querySelector(".edit-card-btn").addEventListener("click",a.showEditCard),n.querySelector(".delete-card-btn").addEventListener("click",a.deleteCard),n.querySelector(".edit-card-form").addEventListener("submit",a.handleEditCardForm),n.querySelector(".add-tag-card-btn").addEventListener("click",o.showAddTagCardModal),document.querySelector(`.panel[data-list-id="${t.list_id}"]`).querySelector(".card-container").appendChild(d)},showAddCardModal:function(t){const e=t.target.closest(".panel").getAttribute("data-list-id"),o=document.getElementById("addCardModal");o.querySelector(".hidden-input").setAttribute("value",e),o.classList.add("is-active")},handleAddCardForm:async function(e){e.preventDefault();try{const o=new FormData(e.target),d=await fetch(t.base_url+"cards",{method:"POST",body:o});if(201===d.status){const t=await d.json();a.makeCardInDOM(t)}else console.log("post /cards something went wrond");t.hideModals()}catch(o){console.error("handle card form:",o)}},showEditCard:function(t){console.log("clic edit card btn");const e=t.target.closest(".box");e.querySelector(".card--content").classList.add("is-hidden"),e.querySelector(".edit-card-form").classList.remove("is-hidden")},hideEditCard:function(t){const e=document.querySelector(`.box[data-card-id="${t}"]`);e.querySelector(".card--content").classList.remove("is-hidden"),e.querySelector(".edit-card-form").classList.add("is-hidden")},handleEditCardForm:async function(e){e.preventDefault();const o=new FormData(e.target),d=e.target.closest(".box"),n=o.get("card-id"),r=d.querySelector(".card-title");try{200===(await fetch(`${t.base_url}cards/${n}`,{method:"PATCH",body:o})).status?(r.textContent=o.get("content"),d.style.backgroundColor=o.get("color"),a.hideEditCard(n)):console.log("post /cards something went wrond")}catch(s){console.error("handle edit card form:",s)}},onCardDrop:async function(t){const e=t.from,o=t.to,d=e.querySelectorAll(".box");await a.moveCards(d);const n=o.querySelectorAll(".box");await a.moveCards(n)},moveCards:async function(e){e.forEach(async(e,o)=>{const a=e.dataset.cardId,d=e.closest(".panel").dataset.listId,n=new FormData;n.append("position",o),n.append("list_id",d);try{await fetch(`${t.base_url}cards/${a}`,{method:"PATCH",body:n})}catch(r){console.error("on card drag n drop:",r)}})},deleteCard:async function(e){e.preventDefault();const o=e.target.closest(".box"),a=o.dataset.cardId;try{204===(await fetch(`${t.base_url}cards/${a}`,{method:"DELETE"})).status?o.remove():console.log("delete /cards something went wrond")}catch(d){console.error("delete card btn:",d)}}};var d=a;const n={makeListInDOM:function(t){const e=document.getElementById("listTemplate"),o=document.importNode(e.content,!0),a=o.querySelector(".panel");a.dataset.listId=t.id,a.id=t.id,o.querySelector(".list-title").textContent=t.name,a.querySelector('.edit-list-form input[name="name"]').value=t.name,a.querySelector('.edit-list-form input[name="list-id"]').value=t.id;const r=o.querySelector(".card-container");new Sortable(r,{group:"list",draggable:".box",onEnd:d.onCardDrop}),o.querySelector(".add-card-btn").addEventListener("click",d.showAddCardModal),o.querySelector(".list-title").addEventListener("dblclick",n.showEditList),o.querySelector(".edit-list-form").addEventListener("submit",n.handleEditListForm),o.querySelector(".delete-list-btn").addEventListener("click",n.deleteList),document.getElementById("kabanBoard").appendChild(o)},showAddListModal:function(){document.getElementById("addListModal").classList.add("is-active")},handleAddListForm:async function(e){e.preventDefault();const o=new FormData(e.target);if(!o.get("name"))return console.warn("Le nom de la liste ne doit pas \xeatre vide");const a=await fetch(t.base_url+"lists",{method:"POST",body:o});if(201===a.status){const t=await a.json();n.makeListInDOM(t)}else console.log("post /lists something went wrond");t.hideModals()},showEditList:function(t){t.target.classList.add("is-hidden"),t.target.parentNode.querySelector(".edit-list-form").classList.remove("is-hidden")},hideEditList:function(t){const e=document.querySelector(`.panel[data-list-id="${t}"]`);e.querySelector(".list-title").classList.remove("is-hidden"),e.querySelector(".edit-list-form").classList.add("is-hidden")},handleEditListForm:async function(e){e.preventDefault();const o=new FormData(e.target),a=o.get("list-id"),d=e.target.closest(".panel").querySelector(".list-title");try{200===(await fetch(`${t.base_url}lists/${a}`,{method:"PATCH",body:o})).status?(d.textContent=o.get("name"),n.hideEditList(a)):console.log("post /cards something went wrong")}catch(r){console.error("handle edit list form:",r)}},deleteList:async function(e){e.preventDefault();const o=e.target.closest(".panel"),a=o.dataset.listId;if(o.querySelector(".box"))return alert("Impossible de supprimer cette liste car elle n'est pas !");if(confirm("Voulez-vous vraiment supprimer cette liste ?"))try{204===(await fetch(`${t.base_url}lists/${a}`,{method:"DELETE"})).status?o.remove():console.log("delete /lists something went wrond")}catch(d){console.error("delete list btn:",d)}}};var r=n;const s={addListenerToAction:function(){document.getElementById("addListButton").addEventListener("click",r.showAddListModal),document.querySelectorAll(".close").forEach(e=>e.addEventListener("click",t.hideModals)),document.querySelector("#addListModal form").addEventListener("submit",r.handleAddListForm),document.querySelector("#addCardModal form").addEventListener("submit",d.handleAddCardForm),document.querySelector("#addTagToCard form").addEventListener("submit",o.handleAddTagToCardForm)},getListsFromAPI:async function(){try{const e=await fetch(t.base_url+"lists",{method:"GET"});if(200===e.status){const t=await e.json();for(const e of t){r.makeListInDOM(e);for(const t of e.cards){d.makeCardInDOM(t);for(const e of t.tags)o.makeTagInCardInDOM(t.id,e)}}}else console.log("get lists and cards: something went wrong")}catch(e){console.error("get all lists:",e)}},getTagsFromAPI:async function(){try{const e=await fetch(t.base_url+"tags",{method:"GET"});if(200===e.status){const t=await e.json();for(const e of t)o.makeTagSelectModalInDOM(e)}else console.log("get lists and cards: something went wrong")}catch(e){console.error("get all lists:",e)}},init:function(){s.getListsFromAPI(),s.getTagsFromAPI(),s.addListenerToAction(),new Sortable(kabanBoard,{animation:150,ghostClass:"blue-background-class"})}};document.addEventListener("DOMContentLoaded",s.init)}();